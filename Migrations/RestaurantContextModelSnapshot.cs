// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProiectLicentaFMI.Models;

#nullable disable

namespace ProiectLicentaFMI.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    partial class RestaurantContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProiectLicentaFMI.Models.Cart", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.Food", b =>
                {
                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FoodPicture")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<string>("FoodPrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FoodId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Food", (string)null);
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderPrice")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId")
                        .HasName("PK_PendingOrder");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.OrderFood", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("OrderFood", (string)null);
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.Restaurant", b =>
                {
                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RestaurantOwner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RestaurantPicture")
                        .IsRequired()
                        .HasColumnType("image");

                    b.HasKey("RestaurantId");

                    b.HasIndex("RestaurantOwner");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("Role");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.Cart", b =>
                {
                    b.HasOne("ProiectLicentaFMI.Models.Food", "Food")
                        .WithMany("Carts")
                        .HasForeignKey("FoodId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_Food");

                    b.HasOne("ProiectLicentaFMI.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_User");

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.Food", b =>
                {
                    b.HasOne("ProiectLicentaFMI.Models.Restaurant", "Restaurant")
                        .WithMany("Foods")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_Food_Restaurants");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.Order", b =>
                {
                    b.HasOne("ProiectLicentaFMI.Models.Restaurant", "Restaurant")
                        .WithMany("Orders")
                        .HasForeignKey("RestaurantId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Restaurants");

                    b.HasOne("ProiectLicentaFMI.Models.OrderType", "TypeNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("Type")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Order");

                    b.HasOne("ProiectLicentaFMI.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("Restaurant");

                    b.Navigation("TypeNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.OrderFood", b =>
                {
                    b.HasOne("ProiectLicentaFMI.Models.Food", "Food")
                        .WithMany("OrderFoods")
                        .HasForeignKey("FoodId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderFood_Food");

                    b.HasOne("ProiectLicentaFMI.Models.Order", "Order")
                        .WithMany("OrderFoods")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderFood_PendingOrder");

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.Restaurant", b =>
                {
                    b.HasOne("ProiectLicentaFMI.Models.User", "RestaurantOwnerNavigation")
                        .WithMany("Restaurants")
                        .HasForeignKey("RestaurantOwner")
                        .HasConstraintName("FK_Restaurants_User");

                    b.Navigation("RestaurantOwnerNavigation");
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.User", b =>
                {
                    b.HasOne("ProiectLicentaFMI.Models.UserRole", "RoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Role")
                        .HasConstraintName("FK_User_UserRoles");

                    b.Navigation("RoleNavigation");
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.Food", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderFoods");
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.Order", b =>
                {
                    b.Navigation("OrderFoods");
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.OrderType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.Restaurant", b =>
                {
                    b.Navigation("Foods");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("ProiectLicentaFMI.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
